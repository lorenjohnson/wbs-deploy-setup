import crypto from 'crypto';
import { existsSync, readFileSync } from 'fs';

export const ENV_FILE_PATH = '/app/deploy/.env';
export const ENV_TEMPLATE_FILE_PATH = '/app/deploy/template.env';
export const LOG_PATH = '/app/setup.log';

// Statuses

export function isBooted(): boolean {
	if ( !existsSync( LOG_PATH ) ) {
		return false;
	}
	const log = readFileSync( LOG_PATH, 'utf8' );
	return log.includes( 'Setup is Complete!' );
}

export function isConfigSaved(): boolean {
	return existsSync( ENV_FILE_PATH );
}

export function isLocalhostSetup(): boolean {
	return process.env.LOCALHOST === 'true';
}

// Configuration

function parseEnv( content: string ): Record<string, string> {
	const env: Record<string, string> = {};
	for ( const line of content.split( '\n' ) ) {
		const m = line.match( /^([^#=\s]+)=(.*)$/ );
		if ( m ) {
			env[ m[ 1 ] ] = m[ 2 ];
		}
	}
	return env;
}

function getEnv(): Record<string, string> | null {
	if ( !isConfigSaved() ) {
		return null;
	}
	return parseEnv( readFileSync( ENV_FILE_PATH, 'utf8' ) );
}

function getTemplateEnv(): Record<string, string> {
	return parseEnv( readFileSync( ENV_TEMPLATE_FILE_PATH, 'utf8' ) );
}

function hasAnyInput( input: Record<string, string> ): boolean {
	// Any non-empty string counts as “input present”
	return Object.values( input ).some( ( v ) => typeof v === 'string' && v !== '' );
}

const generatePassword = (): string => crypto.randomBytes( 12 ).toString( 'base64' );

// --- Public API ---
export function getConfig( input: Record<string, string> = {} ): {
	config: Record<string, string | boolean>;
	configText: string;
} {
	let config: Record<string, string | boolean>;

	// 1) Existing .env wins entirely
	const existing = getEnv();
	if ( existing ) {
		config = existing;
	} else if ( hasAnyInput( input ) ) {
		// 2) Any user input → use exactly; only passwords auto-generate if blank
		config = {
			...input,
			MW_ADMIN_PASS:
				input.MW_ADMIN_PASS && input.MW_ADMIN_PASS !== '' ?
					input.MW_ADMIN_PASS :
					generatePassword(),
			DB_PASS:
				input.DB_PASS && input.DB_PASS !== '' ?
					input.DB_PASS :
					generatePassword(),
			METADATA_CALLBACK: true
		};
	} else {
		// 3) No .env and no input → template defaults; hosts from isLocalhostSetup only;
		// always generate passwords
		const templateEnv = getTemplateEnv();
		const WIKIBASE_PUBLIC_HOST = isLocalhostSetup() ? 'wikibase.test' : '';
		const WDQS_PUBLIC_HOST = isLocalhostSetup() ? 'query.wikibase.test' : '';

		config = {
			...templateEnv,
			MW_ADMIN_EMAIL: '',
			WIKIBASE_PUBLIC_HOST,
			WDQS_PUBLIC_HOST,
			MW_ADMIN_PASS: generatePassword(),
			DB_PASS: generatePassword(),
			METADATA_CALLBACK: true
		};
	}

	// Shared text output
	const lines = Object.entries( config ).map( ( [ k, v ] ) => `${ k }=${ v }` );
	const header = '# Autogenerated .env file from installer UI';
	const configText = `${ header }\n${ lines.join( '\n' ) }\n`;

	return { config, configText };
}
